// 
// File: printer.cpp 
// 
// 
// 
// @author douglas: Douglas Moyer
// 
// // // // // // // // // // // // // // // // // // // // // // // // 

#include "printer.h"
#include <iostream>

printer::printer(vector<quest> *quests, character *player, int *current_quest, vector<character> *fireballs) {
    quests_ = quests;
    player_ = player;
    fireballs_ = fireballs;
    current_quest_ = current_quest;
    for(int i = 0; i < TOTAL_TILE_SPRITES; i++) {
        tile_clips_[i].x = TILE_SIZE*i;
        tile_clips_[i].y = 0;
        tile_clips_[i].w = TILE_SIZE;
        tile_clips_[i].h = TILE_SIZE;
    }
    for(int i = 0; i < TRAPDOOR_ANIMATION_FRAMES; i++) {
        trap_clips_[i].x = TRAPDOOR_SIZE*i;
        trap_clips_[i].y = 0;
        trap_clips_[i].w = TRAPDOOR_SIZE;
        trap_clips_[i].h = TRAPDOOR_SIZE;
    }
    for (int i = 0; i < TOTAL_SPRITES; i++) {
        for (int j = 0; j < ANIMATION_FRAMES; j++) {
            sprite_clips_[i][j].x = i * PLAYER_SIZE;
            sprite_clips_[i][j].y = j * PLAYER_SIZE;
            sprite_clips_[i][j].w = PLAYER_SIZE;
            sprite_clips_[i][j].h = PLAYER_SIZE;
        }
    }
    for (int i = 0; i < FIREBALL_ANIMATION_FRAMES; i++){
        fireball_clips_[i].x = i * FIREBALL_SIZE;
        fireball_clips_[i].y = 0;
        fireball_clips_[i].w = FIREBALL_SIZE;
        fireball_clips_[i].h = FIREBALL_SIZE;
    }
    for (int i = 0; i < TOTAL_SPRITES; i++) {
        for (int j = 0; j < PANDA_ANIMATION_FRAMES; j++) {
            panda_clips_[i][j].x = j * PANDA_SIZE;
            panda_clips_[i][j].y = i * PANDA_SIZE;
            panda_clips_[i][j].w = PANDA_SIZE;
            panda_clips_[i][j].h = PANDA_SIZE;
            zombie_clips_[i][j].x = j * ZOMBIE_SIZE;
            zombie_clips_[i][j].y = i * ZOMBIE_SIZE;
            zombie_clips_[i][j].w = ZOMBIE_SIZE;
            zombie_clips_[i][j].h = ZOMBIE_SIZE;
        }
    }
    camera_.x = (player_->x() + PLAYER_SIZE / 2) - WINDOW_WIDTH / 2;
    camera_.y = (player_->y() + PLAYER_SIZE / 2) - WINDOW_HEIGHT / 2;
    camera_.w = WINDOW_WIDTH;
    camera_.h = WINDOW_HEIGHT;
}

bool printer::init() {
    bool success = true;
    
    if(SDL_Init(SDL_INIT_VIDEO) < 0){
        cout << "SDL could not initialize! Error: " << SDL_GetError() << "\n";
        success = false;
    } else {
        if (!SDL_SetHint(SDL_HINT_RENDER_VSYNC, "1"))
            cout << "VSyinc not enabled!\n";
        if (!SDL_SetHint(SDL_HINT_RENDER_SCALE_QUALITY, "1"))
            cout << "Linear texture filtering not enabled!\n";
            
        window_ = SDL_CreateWindow("Procedural Death Labyrinth", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, WINDOW_WIDTH, WINDOW_HEIGHT, SDL_WINDOW_SHOWN);
        if (window_ == NULL ) {
            cout << "Window could not be created! Error: " << SDL_GetError() << "\n";
            success = false;
        } else {
            renderer_ = SDL_CreateRenderer(window_, -1, SDL_RENDERER_ACCELERATED);
            if(renderer_ == NULL) {
                cout << "Renderer could not be created! Error: " << SDL_GetError() << "\n";
                success = false;
            } else {
                SDL_SetRenderDrawColor(renderer_, 0xFF, 0xFF, 0xFF, 0xFF);
                
                tiles_.set_renderer(renderer_);
                sprites_.set_renderer(renderer_);
                overlay_.set_renderer(renderer_);
                fireball_.set_renderer(renderer_);
                zombie_.set_renderer(renderer_);
                panda_.set_renderer(renderer_);
                trapdoor_.set_renderer(renderer_);
                
                int imgFlags = IMG_INIT_PNG;
                if(!(IMG_Init(imgFlags) & imgFlags)) {
                    cout << "SDL could not initialize! image Error: " << IMG_GetError() << "\n";
                    success = false;
                }
            }
        }
    }
    return success;
}

bool printer::load_media() {
    bool success = true;
    if(!tiles_.load_from_file("spritesheet7.png")) {
        cout << "Can't load tileset!\n";
        success = false;
    }
    if(!sprites_.load_from_file("mage3.png")) {
        cout << "Can't load sprites!\n";
        success = false;
    } 
    if(!overlay_.load_from_file("mask2.png")) {
        cout << "Can't load overlay!\n";
        success = false;
    }
    if(!fireball_.load_from_file("fireballsprite.png")) {
        cout << "Can't load fireball!\n";
        success = false;
    }
    if(!zombie_.load_from_file("zombiesheet.png")) {
        cout << "Can't load zombie!\n";
        success = false;
    }
    if(!panda_.load_from_file("mothafuckinpanda2.png")) {
        cout << "Can't load panda!\n";
        success = false;
    }
    if(!trapdoor_.load_from_file("pitsheet.png")) {
        cout << "Can't load tileset!\n";
        success = false;
    }

    return success;
}

void printer::update() {
    int curr_tile = 0;
    camera_.x = (player_->x() + PLAYER_SIZE / 2) - WINDOW_WIDTH / 2;
    camera_.y = (player_->y() + PLAYER_SIZE / 2) - WINDOW_HEIGHT / 2;
    if(camera_.x < 0) camera_.x = 0;
    if(camera_.y < 0) camera_.y = 0;
    if(camera_.x > LEVEL_WIDTH - camera_.w) camera_.x = LEVEL_WIDTH - camera_.w;
    if(camera_.y > LEVEL_HEIGHT - camera_.h) camera_.y = LEVEL_HEIGHT - camera_.h;
    SDL_SetRenderDrawColor(renderer_, 0xFF, 0xFF, 0xFF, 0xFF);
    SDL_RenderClear(renderer_);
    int terr;
    // a = left
    int a = (camera_.x - (camera_.x % TILE_SIZE)) / TILE_SIZE;
    // b = top
    int b = (camera_.y - (camera_.y % TILE_SIZE)) / TILE_SIZE;
    // c = right
    int c = ((camera_.x + camera_.w) - ((camera_.x + camera_.w) % TILE_SIZE)) / TILE_SIZE;
    // d = bot
    int d = ((camera_.y + camera_.h) - ((camera_.y + camera_.h) % TILE_SIZE)) / TILE_SIZE;
	for (int i = b; i < d+1; i++) {
		for (int j = a; j < c+1; j++) {
            curr_tile++;
            SDL_Rect render_quad = {j * TILE_SIZE, i * TILE_SIZE, TILE_SIZE, TILE_SIZE};
            render_quad.x -= camera_.x;
            render_quad.y -= camera_.y;
            terr = (*quests_)[*current_quest_].curr_floor()->terrain_at(i, j);
            if (terr == 0) terr = (*quests_)[*current_quest_].curr_floor()->temp_terrain_at(i, j);
            else terr += 3;
            SDL_RenderCopyEx(renderer_, tiles_.texture(), &tile_clips_[terr], &render_quad, 0.0, NULL, SDL_FLIP_NONE);
        }
    }
    SDL_Rect player_render = {player_->x() - camera_.x, player_->y() - camera_.y, PLAYER_SIZE, PLAYER_SIZE};
    SDL_RenderCopyEx(renderer_, sprites_.texture(), &sprite_clips_[player_->get_direction()][player_->animation_state()], &player_render, 0.0, NULL, SDL_FLIP_NONE);
    
    for(vector<character>::iterator it = fireballs_->begin(); it != fireballs_->end(); ++it) {
        SDL_Rect fireball_render = {it->x() - camera_.x, it->y() - camera_.y, FIREBALL_SIZE, FIREBALL_SIZE};
        if(it->exists())
            SDL_RenderCopyEx(renderer_, fireball_.texture(), &fireball_clips_[it->animation_state()], &fireball_render, -(it->degrees() + 90), NULL, SDL_FLIP_NONE);
    }
    
    vector<character> *zombs = (*quests_)[*current_quest_].mobs();
    for(vector<character>::iterator it = zombs->begin(); it != zombs->end(); it++) {
        SDL_Rect zombie_render = {it->x() - camera_.x, it->y() - camera_.y, ZOMBIE_SIZE, ZOMBIE_SIZE};
        if(it->exists())
            SDL_RenderCopyEx(renderer_, zombie_.texture(), &zombie_clips_[it->get_direction()][it->animation_state()], &zombie_render, 0.0, NULL, SDL_FLIP_NONE);
    }
    
    character* panda = (*quests_)[*current_quest_].panda();
    SDL_Rect panda_render = {panda->x() - camera_.x, panda->y() - camera_.y, PANDA_SIZE, PANDA_SIZE};
    SDL_RenderCopyEx(renderer_, panda_.texture(), &panda_clips_[panda->get_direction()][panda->animation_state()], &panda_render, 0.0, NULL, SDL_FLIP_NONE);

    character* trapdoor = (*quests_)[*current_quest_].trapdoor();
    SDL_Rect trapdoor_render = {trapdoor->x() - camera_.x, trapdoor->y() - camera_.y, TRAPDOOR_SIZE, TRAPDOOR_SIZE};
    SDL_RenderCopyEx(renderer_, trapdoor_.texture(), &trap_clips_[trapdoor->get_direction()], &trapdoor_render, 0.0, NULL, SDL_FLIP_NONE);

    SDL_Rect overlay_clip = {0, 0, WINDOW_WIDTH*2, WINDOW_HEIGHT*2};
    SDL_Rect overlay_render = {player_->x() - camera_.x - WINDOW_WIDTH, player_->y() - camera_.y - WINDOW_HEIGHT, WINDOW_WIDTH*2, WINDOW_HEIGHT*2};
    SDL_RenderCopyEx(renderer_, overlay_.texture(), &overlay_clip, &overlay_render, 0.0, NULL, SDL_FLIP_NONE);
    SDL_RenderPresent(renderer_);
}

bool printer::check_collision(SDL_Rect a, SDL_Rect b) {
    int leftA, leftB;
    int rightA, rightB;
    int topA, topB;
    int bottomA, bottomB;

    //Calculate the sides of rect A
    leftA = a.x;
    rightA = a.x + a.w;
    topA = a.y;
    bottomA = a.y + a.h;

    //Calculate the sides of rect B
    leftB = b.x;
    rightB = b.x + b.w;
    topB = b.y;
    bottomB = b.y + b.h;

    //If any of the sides from A are outside of B
    if( bottomA <= topB ) return false;
    if( topA >= bottomB ) return false;
    if( rightA <= leftB ) return false;
    if( leftA >= rightB ) return false;
    //If none of the sides from A are outside B
    return true;
}
int printer::poll_event(SDL_Event *e) { return SDL_PollEvent(e); }

void printer::close() {
    tiles_.free();
    sprites_.free();
    
    SDL_DestroyRenderer(renderer_);
    SDL_DestroyWindow(window_);
    window_ = NULL;
    renderer_ = NULL;
    
    IMG_Quit();
    SDL_Quit();
}

Uint32 printer::get_ticks() { return SDL_GetTicks(); }

load_texture::load_texture(){
    texture_ = NULL;
    width_ = 0;
    height_ = 0;
}

load_texture::~load_texture() {
    free();
}

bool load_texture::load_from_file(string path) {
    free();
    SDL_Texture* new_texture = NULL;
    SDL_Surface* loaded_surface = IMG_Load(path.c_str());
    if(loaded_surface == NULL)
        cout << "Unable to load image " << path << "! SDL_image Error: " << IMG_GetError() << "\n";
    else {
        SDL_SetColorKey(loaded_surface, SDL_TRUE, SDL_MapRGB( loaded_surface->format, 0, 0xFF, 0xFF));
        new_texture = SDL_CreateTextureFromSurface( renderer_, loaded_surface);
        if (new_texture == NULL)
            cout << "Unable to load image " << path << "! SDL Error: " << SDL_GetError() << "\n";
        else {
            width_ = loaded_surface->w;
            height_ = loaded_surface->h;
        }
        SDL_FreeSurface(loaded_surface);
    }
    texture_ = new_texture;
    return texture_ != NULL;
}

// bool load_texture::load_from_rendered_text(string text, SDL_Color color){}

void load_texture::free(){
    if(texture_ != NULL) {
        SDL_DestroyTexture(texture_);
        texture_ = NULL;
        width_ = 0;
        height_ = 0;
    }
}

void load_texture::set_color( Uint8 red, Uint8 green, Uint8 blue){
    SDL_SetTextureColorMod(texture_, red, green, blue);
}

void load_texture::set_blend_mode( SDL_BlendMode blending ){
    SDL_SetTextureBlendMode(texture_, blending);
}

void load_texture::set_alpha(Uint8 alpha){
    SDL_SetTextureAlphaMod(texture_, alpha);
}

void load_texture::set_renderer(SDL_Renderer* renderer) {
    renderer_ = renderer;
}

int load_texture::width(){
    return width_;
}

int load_texture::height(){
    return height_;
}

SDL_Texture* load_texture::texture(){
    return texture_;
}



// // // // // // // // // // // // // // // // // // // // // // // // 
// Version: 
// $Id$ 
// 
// Revisions: 
// $Log$ 
// 
